<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>404</title>
      <link href="/posts/1954.html"/>
      <url>/posts/1954.html</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/3eeb.html"/>
      <url>/posts/3eeb.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【底层原理】浮点数在计算机中的表示</title>
      <link href="/posts/56a4.html"/>
      <url>/posts/56a4.html</url>
      
        <content type="html"><![CDATA[<h1 id="一道C语言题："><a href="#一道C语言题：" class="headerlink" title="一道C语言题："></a>一道C语言题：</h1><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">float</span> *pFloat = &amp;num;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"num 的值为：%d\n"</span>,num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*pFloat 的值为：%f\n"</span>,*pFloat);</span><br><span class="line"></span><br><span class="line">    *pFloat = <span class="number">9.0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"num 的值为：%d\n"</span>,num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*pFloat 的值为：%f\n"</span>,*pFloat);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果：<br><img src="https://oss.foxhuli.top/hexo-blog/images/loading.gif" data-original="http://hexoblog-1257022783.cos.ap-chengdu.myqcloud.com/%E3%80%90%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E3%80%91%E6%B5%AE%E7%82%B9%E6%95%B0%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E8%A1%A8%E7%A4%BA/20190222014746020.png" alt=""></p><p><strong>产生上述结果的原因：浮点数在计算机中的表示与整数在计算机中的表示存在差异</strong></p><hr><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><h4 id="整数在计算机中的表示："><a href="#整数在计算机中的表示：" class="headerlink" title="整数在计算机中的表示："></a>整数在计算机中的表示：</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">9</span>;</span><br></pre></td></tr></tbody></table></figure><p>上面这条语句声明并定义了一个整型int变量num为9；在普通的32位计算机中，用四个字节表示int，其二进制表示为：</p><blockquote><blockquote><p>00000000 00000000 00000000 00001001</p></blockquote></blockquote><h4 id="浮点数在计算机中的表示："><a href="#浮点数在计算机中的表示：" class="headerlink" title="浮点数在计算机中的表示："></a>浮点数在计算机中的表示：</h4><p>根据国际标准IEEE 754，任意一个二进制浮点数V可以表示为下面这种形式：</p><blockquote><blockquote><p> $ V = (-1)^{s} · M · 2^{E} $</p></blockquote><ul><li>s表示符号位，s=0为正，s=1为负；</li><li>M为有效数字，$1&lt;= M &lt;2$;</li><li>$2^E$表示指数位； </li></ul></blockquote><p>如题例，十进制的 $ 9.0 $ ,写成二进制位$1001.0$,相当于：$ 1.001 · 2^{3} $,其中$ s=0,M=1.001,E=3 $;<br>十进制的$ -9.0 $,写成二进制为$ -1001.0 $,相当于：$ -1.001 · 2^{3} $,其中$ s=1,M=1.001,E=3 $;</p><p><strong>有效数字M：</strong></p><p>IEEE 745规定，对于32位的浮点数，最高的一位是符号位s，接着的8位是指数E，剩下的23位为有效数字M：<br><img src="https://oss.foxhuli.top/hexo-blog/images/loading.gif" data-original="http://hexoblog-1257022783.cos.ap-chengdu.myqcloud.com/%E3%80%90%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E3%80%91%E6%B5%AE%E7%82%B9%E6%95%B0%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E8%A1%A8%E7%A4%BA/20190222022411070.png" alt="32bIt"><br>对于64位的浮点数来说，最高的一位仍为符号位s，接着的11位是指数E，剩下的52位为有效数字M：<br><img src="https://oss.foxhuli.top/hexo-blog/images/loading.gif" data-original="http://hexoblog-1257022783.cos.ap-chengdu.myqcloud.com/%E3%80%90%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E3%80%91%E6%B5%AE%E7%82%B9%E6%95%B0%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E8%A1%A8%E7%A4%BA/20190222023402771.png" alt="64bit"><br>另外，前面提到，$1&lt;= M &lt;2$,也就是说M可以写成$1.x_1x_2x_3x_4$的形式，其中$x_1x_2x_3x_4$表示小数部分。IEEE 754规定，在计算机内包存M时， 默认这个数的第一位为 1，因此可以被舍去，这样子就可以节省一位有效数字位，使得32（64）位浮点数可以保存24（53）位的有效数字。</p><p><strong>指数E的情况稍微复杂一些：</strong></p><p>首先，E是一个无符号整数（unsign int ）,着意味着当E为8位时，其取值范围为0到255；若E为11位其取值范围为0到2047。但是我们知道，科学计数法中的E可以是负数，因此，E的真实值必须减去一个中间值。对于8位的E应减去127，对于11位的E应减去1023；</p><p>比如说，$ 2^{9} $ 的E是9，所以保存成32位浮点数时，必须保存为$E = 9+127=136$,即$10001000$。</p><p><strong>还原E的真实值时还可以分成3种情况：</strong></p><ol><li>E不全为0或不全为1:。这时可直接用E减去127（1023）即可得到E的真实值。</li><li>E全为0。这时浮点数的指数E为1-127（1-1023），有效数字M不再加上第一位，而是还原成$0.x_1x_2x_3x_4$的小数。这样做是为了表示$\pm0$,以及接近于0的很小的数字。</li><li>E全为1。这时如果有效数字M全为0，则表示$\pm$无穷大（取决于符号位s）；如果有效数字M不全为0，表示这个数是一个$NaN$。</li></ol><hr><p>到此，回顾最初的问题。</p><ol><li><p>为什么$00000000 00000000 00000000 00001001$还原成浮点数就变成了$0.000000$ 呢???<br>首先：00000000 00000000 00000000 00001001的符号位s为0表示其为正；<br>再者：00000000 00000000 00000000 00001001的指数位E为00000000（全为0），符合第2种情况，还原后的E的真实值为：$E=1-127=-126$；<br>最后：00000000 00000000 00000000 00001001的有效数字位为：$000 0000 0000 0000 0000 1001$。<br>综上：$V = (-1)^{0} · 0.00000000000000000001001 · 2^{-126} = 1.001 · 2^{-146}$<br>可以看出这是一个很小的数，故用十进制表示为0.000000.</p></li><li><p>浮点数9.0如何用二进制表示，还原成十进制后为何是1092567616 呢？<br>首先：浮点数9.0的二进制表示为1001.0，即为$1.001 · 2^3$；符号位s=0；<br>再者：有效数字M=100 0000 0000 0000 0000 0000（共23位（100后加上20个0）其中最高位1默认被省略）。<br>最后：指数E=3+127=130，即$E = 10000010_{BIN}$。<br>综上：浮点数9.0在计算机内的表示为：$0 10000010 00100000000000000000000$，将其转化为十进制就是：1091567616<br><img src="https://oss.foxhuli.top/hexo-blog/images/loading.gif" data-original="http://hexoblog-1257022783.cos.ap-chengdu.myqcloud.com/%E3%80%90%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E3%80%91%E6%B5%AE%E7%82%B9%E6%95%B0%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E8%A1%A8%E7%A4%BA/20190222033629845.png" alt=""></p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 底层原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
