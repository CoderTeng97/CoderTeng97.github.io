<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis 的数据类型及使用案例</title>
      <link href="/posts/e3c4.html"/>
      <url>/posts/e3c4.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-1Redis-的数据类型及使用案例"><a href="#1-1Redis-的数据类型及使用案例" class="headerlink" title="1.1Redis 的数据类型及使用案例"></a>1.1Redis 的数据类型及使用案例</h2><p>Redis应用于各种数据结构非数据结构的高热度的数据访问加速,通过本篇文章您可以快速了解它数据存储的应用场景</p><a id="more"></a><h3 id="1-1-2-String-数据类型"><a href="#1-1-2-String-数据类型" class="headerlink" title="1.1.2 String 数据类型"></a>1.1.2 String 数据类型</h3><h4 id="运用案例"><a href="#运用案例" class="headerlink" title="运用案例"></a>运用案例</h4><p>微博大V的用户关注数，粉丝数，微博等信息显示</p><p><strong>解决方案：</strong></p><ul><li>将用户id作为key，将显示的数据作为value</li><li>数据的增长在后台对相应的key value进行定时刷新</li></ul><h3 id="1-1-2-Hash数据类型"><a href="#1-1-2-Hash数据类型" class="headerlink" title="1.1.2 Hash数据类型"></a>1.1.2 Hash数据类型</h3><h4 id="运用案例-1"><a href="#运用案例-1" class="headerlink" title="运用案例"></a>运用案例</h4><h5 id="用户购物车的实现"><a href="#用户购物车的实现" class="headerlink" title="用户购物车的实现"></a>用户购物车的实现</h5><p>用户购物车有有商品的数量，商品的基本信息，在活动期间，如何快速的让用户获取商品信息及商品数量？</p><p><strong>解决方案：</strong></p><ul><li><p>以用户的id作为key，每位客户创建一个hash存储结构存储对应的购物车信息</p></li><li><p>将商品编号作为fileld，购买数量作为value进行存储</p></li><li><p>添加商品：追加全新的field与value</p></li><li><p>浏览：遍历hash</p></li><li><p>更改数量：自增/自减，这只value值</p></li><li><p>删除商品：删除field</p></li><li><p>清空：删除key</p></li><li><p><strong>以上信息只是报错了数量，没有商品的基本信息，无法做到快速加载，因此，需要另外的hash作为商品信息的存储，且商品唯一。</strong></p></li></ul><h5 id="抢购活动"><a href="#抢购活动" class="headerlink" title="抢购活动"></a>抢购活动</h5><p>商家的发布某几类商品作为抢购对象，上限为100，如何保证高并发的商品抢购</p><p><strong>解决方案：</strong></p><ul><li><p>以商家id作为key</p></li><li><p>将参与的id作为field</p></li><li><p>将参与的抢购商品数量作为对应的value</p></li><li><p>抢购时使用降值得方式控制产品数量</p></li></ul><h3 id="1-1-3-List数据类型"><a href="#1-1-3-List数据类型" class="headerlink" title="1.1.3 List数据类型"></a>1.1.3 List数据类型</h3><h4 id="使用的注意事项"><a href="#使用的注意事项" class="headerlink" title="使用的注意事项"></a>使用的注意事项</h4><ul><li>list中保存的数据都是stirng类型，数据总容量有限，最多2 32 -1个元素</li><li>list具有索引的概念，但是操作数据是通常以队列的形式进行入队出队操作或则以出入栈的方式</li><li>获取全部数据操作结束索引设置为-1</li><li>list可以对数据分页操作，通常第一页信息信息来自于list，第2页信息及更多通过数据库形式加载</li></ul><h4 id="运用案例-2"><a href="#运用案例-2" class="headerlink" title="运用案例"></a>运用案例</h4><h5 id="最新的新闻或资讯按照发生的时间顺序展示"><a href="#最新的新闻或资讯按照发生的时间顺序展示" class="headerlink" title="最新的新闻或资讯按照发生的时间顺序展示"></a>最新的新闻或资讯按照发生的时间顺序展示</h5><p>企业运营过程中，系统产生大量的运营数据，保障多台服务器操作日志的统一顺序输出</p><p><strong>解决方案：</strong></p><ul><li>依赖list的数据具有顺序的特征对信息进行管理</li><li>使用队列模型解决多路信息汇总合并的问题</li><li>使用栈模型解决最新消息的问题</li></ul><h3 id="1-1-4-set数据类型"><a href="#1-1-4-set数据类型" class="headerlink" title="1.1.4 set数据类型"></a>1.1.4 set数据类型</h3><h4 id="Set的运用案例"><a href="#Set的运用案例" class="headerlink" title="Set的运用案例"></a>Set的运用案例</h4><h5 id="统计网站访问数据"><a href="#统计网站访问数据" class="headerlink" title="统计网站访问数据"></a>统计网站访问数据</h5><p>PV：网站的访问次数 </p><p>UV：网站被不同用户访问的次数，可通过cookie统计访问量，相同用户切换IP地址，UV不变</p><p>IP：网站被不同IP访问的总次数，可通过IP进行统计，相同IP访问，IP不变</p><p><strong>解决方案：</strong></p><ul><li>利用set集合的数据去重特征，记录各类的访问数据</li><li>string数据类型，记录访问的次数</li><li>set模型，记录不同cookie的数量</li><li>set模型，记录不同ip的数量</li></ul><h5 id="黑名单的实现"><a href="#黑名单的实现" class="headerlink" title="黑名单的实现"></a>黑名单的实现</h5><p>针对咨询类网站，防止爬虫带来的的影响，频繁的获取网站信息。</p><p><strong>解决方案：</strong></p><ul><li><p>基于经营战略设定问题用户发现，鉴别规则</p></li><li><p>周期性更新满足规则的用户黑名单，加入set集合</p></li><li><p>用户行为信息到达后进行黑名单比对，确认行为去向</p></li><li><p>黑名单过滤ip地址：应用于开发有课访问权限的信息源</p></li><li><p>黑名单过滤设备信息：应用于限定访问设备的信息源</p></li><li><p>黑名单过滤用户：应用于基于访问权限的信息源</p></li></ul><h3 id="1-1-5-知识点"><a href="#1-1-5-知识点" class="headerlink" title="1.1.5 知识点"></a>1.1.5 知识点</h3><h5 id="String存储对象（json）与hash存储对象的区别"><a href="#String存储对象（json）与hash存储对象的区别" class="headerlink" title="String存储对象（json）与hash存储对象的区别"></a>String存储对象（json）与hash存储对象的区别</h5><p>String存储对象保证数据的整体性，在于读取呈现方便，而Hash存储对象在更新修改方面更加的灵活。</p><h5 id="redis只做数据存储，避免在redis中使用业务"><a href="#redis只做数据存储，避免在redis中使用业务" class="headerlink" title="redis只做数据存储，避免在redis中使用业务"></a>redis只做数据存储，避免在redis中使用业务</h5><h5 id="redis应用于各种数据结构非数据结构的高热度的数据访问加速"><a href="#redis应用于各种数据结构非数据结构的高热度的数据访问加速" class="headerlink" title="redis应用于各种数据结构非数据结构的高热度的数据访问加速"></a>redis应用于各种数据结构非数据结构的高热度的数据访问加速</h5><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端开发知识点（续更）</title>
      <link href="/posts/d40f.html"/>
      <url>/posts/d40f.html</url>
      
        <content type="html"><![CDATA[<h4 id="数据库存储函数的作用及用法"><a href="#数据库存储函数的作用及用法" class="headerlink" title="数据库存储函数的作用及用法"></a>数据库存储函数的作用及用法</h4><p>1.保证数据的安全性和完整性。逻辑封装在函数中，保证的数据的安全性及完整性。</p><a id="more"></a><p>2.可以降低网络的通信量提高查询效率。存储过程主要是在服务器上运行，减少对客户机的压力，并且SQL语句经过预编译，所以提高了查询的速度。</p><p>3.使用方法</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> sp_name ([proc_parameter[,...]]) [characteristic ...] routine_body</span><br></pre></td></tr></tbody></table></figure><p>4.存储函数的缺点：难以调试和扩展，可移植性差</p><h4 id="数据库的优化策略"><a href="#数据库的优化策略" class="headerlink" title="数据库的优化策略"></a>数据库的优化策略</h4><p>1.对热门业务字段建立索引</p><p>2.数据库读写分离，可采用数据库读写分离，也可以使用搜索引擎（Es）作为主要查询，数据库作为主要更新及简单的查询</p><p>3.对具有历史性质的规模大表表（如订单表）进行分离，可以转移至Hdfs类似的存储系统。</p><p>4.SQL优化</p><h4 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h4><ol><li>查询中避免使用如下几种场景，否则将导致引擎放弃使用索引而进行全表扫描</li></ol><ul><li>避免进行 null 值判断，使用 ISNULL()来判断是否为 NULL 值</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span> <span class="keyword">is</span> <span class="literal">null</span></span><br></pre></td></tr></tbody></table></figure><ul><li>避免使用 != 或 &lt;&gt;</li><li>避免where 子句中使用 or 连接，如果一个字段有索引，一个字段没有索引，将导致引擎放弃使用索引而进行全表扫描</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'test'</span> <span class="keyword">or</span> age=<span class="number">15</span></span><br><span class="line"><span class="comment">-- 以上SQL可以通过UNION 优化</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'test'</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> age=<span class="number">15</span></span><br></pre></td></tr></tbody></table></figure><ul><li>避免使用全模糊或左模糊匹配（%text% 或 % text）</li><li>避免在 where 子句中对字段进行表达式操作</li><li>in 和 not in，可使用exists代替使用</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 根据多个id查询用户</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">USER</span> <span class="keyword">WHERE</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> <span class="keyword">USER</span>)</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>对于查询连续的数值，用 between and 代替 in</li><li>尽量不要使用 select * ，而使用具体的字段代替</li></ol><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><ol><li><p>队列的实现（两个栈实现一个队列）</p><p><img src="https://cdn.jsdelivr.net/gh/foxhuli229/cdn@1.2/images/loading.gif" data-original="https://tblog-oss.oss-cn-beijing.aliyuncs.com/blog20200421103901.png" alt="image.png"></p></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> datastructure.queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 两个栈实现一个队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>{</span><br><span class="line">    Stack&lt;Integer&gt; stack1 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; stack2 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 队列元素的存入</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> n)</span></span>{</span><br><span class="line">        stack1.push(n);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列元素取出</span></span><br><span class="line"><span class="comment">     * 1.利用栈后进先出的原理实现队列（子弹匣装弹的效果） </span></span><br><span class="line"><span class="comment">     * 2.队列的原理是先进先出 （排队的一个效果）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">pop</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (stack2.empty()){<span class="comment">//stack2 为空，将stack1元素移入到stack2中</span></span><br><span class="line">            <span class="keyword">if</span> (stack1.size() &gt; <span class="number">0</span>){</span><br><span class="line">                <span class="keyword">while</span> (stack1.size() &gt; <span class="number">0</span>){ <span class="comment">// 将元素移入stack2</span></span><br><span class="line">                    stack2.push(stack1.pop());</span><br><span class="line">                }</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                System.out.println(<span class="string">"队列目前没有元素"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> stack2.pop();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql存储函数</title>
      <link href="/posts/b5fb.html"/>
      <url>/posts/b5fb.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-1存储过程"><a href="#1-1存储过程" class="headerlink" title="1.1存储过程"></a>1.1存储过程</h4><p>存储过程类似Java中的方法，一组预先编译好的SQL语句集合成批处理语句，它的主要作用如下</p><a id="more"></a><ul><li><p>提高了代码的重用性</p></li><li><p>简化了操作</p></li><li><p>减少了编译次数并减少了和数据库服务器的连接次数，提高了效率</p></li></ul><h4 id="1-2存储过程的创建"><a href="#1-2存储过程的创建" class="headerlink" title="1.2存储过程的创建"></a>1.2存储过程的创建</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">delimiter</span><br><span class="line">    create procedure 存储过程名(参数列表)</span><br><span class="line"></span><br><span class="line">    begin</span><br><span class="line"></span><br><span class="line">      存储过程体（一组合法的SQL语句）</span><br><span class="line"></span><br><span class="line">    end</span><br><span class="line">delimiter $</span><br><span class="line">-- 参数列表</span><br><span class="line">参数列表包含如下三部分：</span><br><span class="line">参数模式：IN（输入参数）、OUT（输出参数）、INOUT(可作为输入或输出的参数)</span><br><span class="line">参数名：用户自定义参数名称</span><br><span class="line">参数类型：数据库字段类型（如varchar，int...）</span><br></pre></td></tr></tbody></table></figure><h4 id="1-3存储函数的调用"><a href="#1-3存储函数的调用" class="headerlink" title="1.3存储函数的调用"></a>1.3存储函数的调用</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call 存储过程名(实参列表)</span><br></pre></td></tr></tbody></table></figure><h4 id="1-4存储函数的删除"><a href="#1-4存储函数的删除" class="headerlink" title="1.4存储函数的删除"></a>1.4存储函数的删除</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP PROCEDURE 存储过程名</span><br></pre></td></tr></tbody></table></figure><h4 id="1-5存储过程的查看"><a href="#1-5存储过程的查看" class="headerlink" title="1.5存储过程的查看"></a>1.5存储过程的查看</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE PROCEDURE 存储过程名;</span><br></pre></td></tr></tbody></table></figure><h4 id="1-6存储函数的案例"><a href="#1-6存储函数的案例" class="headerlink" title="1.6存储函数的案例"></a>1.6存储函数的案例</h4><h5 id="无参数"><a href="#无参数" class="headerlink" title="无参数"></a>无参数</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 获取用户列表10</span><br><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE getus()</span><br><span class="line"></span><br><span class="line">BEGIN</span><br><span class="line">   SELECT * FROM USER limit 10;</span><br><span class="line">END $</span><br><span class="line">-- 调用</span><br><span class="line">CALL getu</span><br></pre></td></tr></tbody></table></figure><h5 id="IN模式"><a href="#IN模式" class="headerlink" title="IN模式"></a>IN模式</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-- 单个参数-根据id获取用户信息</span><br><span class="line">DELIMITER $</span><br><span class="line">CREATE PROCEDURE getu(IN uid VARCHAR(50))</span><br><span class="line">BEGIN</span><br><span class="line">SELECT * FROM USER WHERE id=uid;</span><br><span class="line">END $</span><br><span class="line">-- 调用</span><br><span class="line">CALL getu('1246413505062629376');</span><br><span class="line"></span><br><span class="line">-- 多个参数-用户登录</span><br><span class="line">DELIMITER $</span><br><span class="line">CREATE  PROCEDURE  login(IN username VARCHAR(20),IN PASSWORD VARCHAR(50))</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE result VARCHAR(20) DEFAULT ''; ##申明变量</span><br><span class="line">SELECT </span><br><span class="line">COUNT(*) INTO result #赋值 </span><br><span class="line">FROM USER WHERE username=username AND PASSWORD=PASSWORD;</span><br><span class="line">SELECT IF(result &gt; 0,'成功','失败');</span><br><span class="line"></span><br><span class="line">END $</span><br><span class="line">-- 调用</span><br><span class="line">CALL login('user','123456');</span><br></pre></td></tr></tbody></table></figure><h5 id="OUT-模式"><a href="#OUT-模式" class="headerlink" title="OUT 模式"></a>OUT 模式</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 获取用户的性别</span><br><span class="line">DELIMITER $</span><br><span class="line">CREATE  PROCEDURE  get_usex(IN uid VARCHAR(20),OUT sex VARCHAR(20))</span><br><span class="line">BEGIN</span><br><span class="line">SELECT </span><br><span class="line">gender  INTO sex</span><br><span class="line">FROM USER WHERE id=uid;</span><br><span class="line"></span><br><span class="line">END $</span><br><span class="line">-- 调用</span><br><span class="line">CALL get_usex('1246413505062629376',@sex);</span><br><span class="line">SELECT @sex;</span><br></pre></td></tr></tbody></table></figure><h5 id="INOUT-模式"><a href="#INOUT-模式" class="headerlink" title="INOUT 模式"></a>INOUT 模式</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 输入两个值并翻倍返回</span><br><span class="line">DELIMITER $</span><br><span class="line">CREATE  PROCEDURE  doubleAB(INOUT a INT,INOUT b INT)</span><br><span class="line">BEGIN</span><br><span class="line">SET a=a*2; #局部变量赋值</span><br><span class="line">SET b=b*2;</span><br><span class="line">END $</span><br><span class="line">-- 调用</span><br><span class="line">SET @a=10; # 设置用户变量</span><br><span class="line">SET @b=20;</span><br><span class="line">CALL doubleAB(@a,@b);</span><br><span class="line">SELECT @a,@b;</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库开发与设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Admin Axios Head请求头 Content-Length 经典问题记录</title>
      <link href="/posts/d8e5.html"/>
      <url>/posts/d8e5.html</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>一个正常的请求发送到Zuul网关报错,但其他平台可以正确访问</p><a id="more"></a><h4 id="axios请求实例："><a href="#axios请求实例：" class="headerlink" title="axios请求实例："></a>axios请求实例：</h4><p><img src="https://cdn.jsdelivr.net/gh/foxhuli229/cdn@1.2/images/loading.gif" data-original="https://tblog-oss.oss-cn-beijing.aliyuncs.com/hexo-client/2020/04/15/4cb57c70-7ec9-11ea-97ab-eb9c6e1c9996.png" alt="image.png"></p><p>后台报错<br><img src="https://cdn.jsdelivr.net/gh/foxhuli229/cdn@1.2/images/loading.gif" data-original="https://tblog-oss.oss-cn-beijing.aliyuncs.com/hexo-client/2020/04/15/c92da700-7ec9-11ea-97ab-eb9c6e1c9996.png" alt="image.png"></p><h4 id="正常Postman请求："><a href="#正常Postman请求：" class="headerlink" title="正常Postman请求："></a>正常Postman请求：</h4><p><img src="https://cdn.jsdelivr.net/gh/foxhuli229/cdn@1.2/images/loading.gif" data-original="https://tblog-oss.oss-cn-beijing.aliyuncs.com/hexo-client/2020/04/15/d55dbda0-7ecc-11ea-97ab-eb9c6e1c9996.png" alt="image.png"></p><h3 id="问题发现"><a href="#问题发现" class="headerlink" title="问题发现"></a>问题发现</h3><p>zuul网关的报错信息无法提供有效的信息，只有通过拦截器流程debug，终于发现是Content-Lenght的问题，于是在postman中进行验证，只要加上content-lenght就会报错，因此是请求的lenght值错误。<br><img src="https://cdn.jsdelivr.net/gh/foxhuli229/cdn@1.2/images/loading.gif" data-original="https://tblog-oss.oss-cn-beijing.aliyuncs.com/hexo-client/2020/04/15/6f8aedc0-7ece-11ea-97ab-eb9c6e1c9996.png" alt="image.png"></p><h3 id="提出及验证问题"><a href="#提出及验证问题" class="headerlink" title="提出及验证问题"></a>提出及验证问题</h3><h4 id="通过写拦截器发现问题"><a href="#通过写拦截器发现问题" class="headerlink" title="通过写拦截器发现问题"></a>通过写拦截器发现问题</h4><p><img src="https://cdn.jsdelivr.net/gh/foxhuli229/cdn@1.2/images/loading.gif" data-original="https://tblog-oss.oss-cn-beijing.aliyuncs.com/blog20200416174317.png" alt="image.png"></p><p>因为content-lenght长度错误导致获取数据流只能到上图中的数据，导致handle数据转换报错</p><p>通过axios源码查看，及xhr.js Debug，发现content-lenght都计算正确且为155，但是发送出去就变成56，因此是浏览器或者其他问题，十分神奇，等待大牛援助！！！</p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>经过尝试，仍没有解决，于是我接受了他人建议切换vue-admin-template 的version，于是我切换到vue3.0版本（错误的使用的vue-admin最新版本），发现成功请求。</p><p>What？怎么会是版本的问题，为什么会出现呢？太无语了…..</p><p>这也算vue-admin-template 4.1.0版本的bug吧，等待大牛解决这个离谱的问题（续更…）</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 开发问题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7.5 搭建Ambari</title>
      <link href="/posts/fee8.html"/>
      <url>/posts/fee8.html</url>
      
        <content type="html"><![CDATA[<p>Ambari和CDH是同样的Hadoop集群管理组件，但Ambari属于轻量级组件并且功能能满足基本需求。</p><a id="more"></a><p>本笔记只讲解Ambari离线搭建重点，简单的虚拟机操作不在赘述，但我会进行步骤说明。</p><p>在开始本步骤之前请确保集群虚拟满足如下要求：</p><ul><li>各虚拟机节点互通，且可以访问外网</li><li>关闭防火墙并设置开机不启动（systemctl disable firewalld)</li><li>主节点(ambari安装节点)与子节点ssh无秘访问</li><li>配置每个节点的hostname并配置hosts，其中包含所有节点信息</li><li>安装Java环境并配置用户变量</li></ul><blockquote><p>安装rsync，通过scp及rsync分配文件到各个节点会变得十分方便</p></blockquote><h3 id="1-1-下载要安装Ambari版本及HDP的tar包"><a href="#1-1-下载要安装Ambari版本及HDP的tar包" class="headerlink" title="1.1 下载要安装Ambari版本及HDP的tar包"></a>1.1 下载要安装Ambari版本及HDP的tar包</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">文件可以根据自己的喜好到官网下载</span></span><br><span class="line"><span class="meta">#</span><span class="bash">HDP 离线安装文件</span></span><br><span class="line">http://public-repo-1.hortonworks.com/HDP/centos7/2.x/updates/2.6.3.0/HDP-2.6.3.0-centos7-rpm.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash">Ambari离线安装文件 （包含服务端server、客户端agent 的rpm安装包）</span></span><br><span class="line">http://public-repo-1.hortonworks.com/ambari/centos7/2.x/updates/2.6.0.0/ambari-2.6.0.0-centos7.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash">HDP工具离线安装文件</span></span><br><span class="line">http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.21/repos/centos7/HDP-UTILS-1.1.0.21-centos7.tar.gz</span><br></pre></td></tr></tbody></table></figure><p>###1.2 创建本地yum安装源</p><h4 id="1-2-1-创建yum-仓库"><a href="#1-2-1-创建yum-仓库" class="headerlink" title="1.2.1 创建yum 仓库"></a>1.2.1 创建yum 仓库</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载创建工具</span></span><br><span class="line">yum install httpd -y</span><br><span class="line">yum install creatrepo -y</span><br><span class="line"><span class="meta">#</span><span class="bash">httpd设置开机启动并运行</span></span><br><span class="line">systemctl start httpd </span><br><span class="line">systemctl enable httpd</span><br><span class="line"><span class="meta">#</span><span class="bash">在/var/www/html 下创建文件 ambari，并将安装文件全部解压到此文件中</span></span><br><span class="line">mkdir -p /var/www/html/ambari</span><br><span class="line">tar -zxvf 安装文件tar包 -C /var/www/html/ambari</span><br><span class="line"><span class="meta">#</span><span class="bash">生成repo目录，命令在/var/www/html/ambari目录下执行</span></span><br><span class="line">createrepo .</span><br><span class="line"><span class="meta">#</span><span class="bash">完成后可以通过 ip地址/ambari访问</span></span><br></pre></td></tr></tbody></table></figure><h4 id="1-2-1-配置主机yum-repo源"><a href="#1-2-1-配置主机yum-repo源" class="headerlink" title="1.2.1 配置主机yum repo源"></a>1.2.1 配置主机yum repo源</h4><blockquote><p>此配置是为了当你yum安装时，默认访问本地搭建的ambari仓库</p></blockquote><p><strong>进入到/etc/yum.repo.d/目录下，创建ambari.repo文件，完成后分配到各个子节点</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">baseurl 对应ambari仓库下各个组件的安装目录，记住一定要请求url是否配置正确，以防止后续修改增加不必要的工作</span></span><br><span class="line"><span class="meta">#</span><span class="bash">请复制以下内容</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">VERSION_NUMBER=2.6.0.0-267 </span></span><br><span class="line">[ambari-2.6.0.0]</span><br><span class="line">name=ambari Version - ambari-2.6.0.0</span><br><span class="line">baseurl=http://192.168.0.10/ambari/ambari/centos7/2.6.0.0-267</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://192.168.0.10/ambari/ambari/centos7/2.6.0.0-267/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins</span><br><span class="line">enabled=1</span><br><span class="line">priority=1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">VERSION_NUMBER=2.6.5.0-292 </span></span><br><span class="line">[HDP-2.6.5.0]</span><br><span class="line">name=HDP Version - HDP-2.6.5.0</span><br><span class="line">baseurl=http://192.168.0.10/ambari/HDP/centos7/2.6.5.0-292/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://192.168.0.10/ambari/HDP/centos7/2.6.5.0-292/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins</span><br><span class="line">enabled=1</span><br><span class="line">priority=1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">HDP-UTILS-1.1.0.22</span></span><br><span class="line">name=HDP-UTILS Version - HDP-UTILS-1.1.0.22</span><br><span class="line">baseurl=http://192.168.0.10/ambari/HDP-UTILS/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://192.168.0.10/ambari/HDP-UTILS/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins</span><br><span class="line">enabled=1</span><br><span class="line">priority=1</span><br></pre></td></tr></tbody></table></figure><h4 id="1-2-3-生成yum缓存文件（子节点也需要执行）"><a href="#1-2-3-生成yum缓存文件（子节点也需要执行）" class="headerlink" title="1.2.3 生成yum缓存文件（子节点也需要执行）"></a>1.2.3 生成yum缓存文件（子节点也需要执行）</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">清除旧缓存</span></span><br><span class="line">yum clean all 或 rm -rf /var/cache/yum</span><br><span class="line"><span class="meta">#</span><span class="bash">生成缓存文件</span></span><br><span class="line">yum makecache</span><br></pre></td></tr></tbody></table></figure><h3 id="1-3-安装Ambari并配置启动"><a href="#1-3-安装Ambari并配置启动" class="headerlink" title="1.3 安装Ambari并配置启动"></a>1.3 安装Ambari并配置启动</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装ambari,只在Ambari服务器上安装，agent客户端后面安装集群时Ambari自动安装到各个子节点</span></span><br><span class="line">yum install ambari-server* -y</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置ambari</span></span><br><span class="line">ambari-server setup</span><br><span class="line"><span class="meta">#</span><span class="bash">里面的步骤都有英文描述，仔细查看执行步骤，请多注意数据库配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash">不要害怕安装失败，如果有错误可以通过ambari-server setup继续重新安装</span></span><br></pre></td></tr></tbody></table></figure><p>这样安装后还需要修改配置文件，增加如下参数</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#增加数据库驱动路径（默认数据库不用填写）</span><br><span class="line">server.jdbc.driver.path=数据库驱动jar包路径</span><br></pre></td></tr></tbody></table></figure><p>启动并通过 ip地址：8080访问，默认账号密码都为admin</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ambari-server start</span><br></pre></td></tr></tbody></table></figure><blockquote><p>Tip：ambari 安装很简单，主要在于它的数据库配置，启动时注意查看ambari日志，一切问题迎刃而解。</p></blockquote><h3 id="1-4-安装Hadoop集群"><a href="#1-4-安装Hadoop集群" class="headerlink" title="1.4 安装Hadoop集群"></a>1.4 安装Hadoop集群</h3><p>我搭建后写的，所以没有截图，我会向你提供如下主要的流程点击踩坑的经验：</p><ul><li><p>在选择主机流程中，你需要将家目录下的.ssh文件下的id_rsa文件上传即可</p></li><li><p>安装失败，提示openssl版本不兼容的错误，你需要使用如下命令更新</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在每个节点都需要执行</span><br><span class="line">yum update openssl -y</span><br></pre></td></tr></tbody></table></figure></li></ul><ul><li><p>安装Agent失败时，你需要修改/etc/ambari-agent/conf/ambari-agent.ini文件，新增如下信息</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[security]</span><br><span class="line">ssl_verify_cert=0</span><br><span class="line">force_https_protocol=PROTOCOL_TLSv1_2</span><br></pre></td></tr></tbody></table></figure></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Ambari </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带你认识项目管理及项目经理PM岗位</title>
      <link href="/posts/44de.html"/>
      <url>/posts/44de.html</url>
      
        <content type="html"><![CDATA[<p>本章的总结知识均从光环国际PMP教材中提取和总结，您能在本章知识中学到什么是项目管理及如何成为项目经理，让您对项目经理的发展方向有更深的理解。</p><a id="more"></a><h2 id="1-1项目管理概论"><a href="#1-1项目管理概论" class="headerlink" title="1.1项目管理概论"></a>1.1项目管理概论</h2><h3 id="1-1-1项目管理的形成及目标"><a href="#1-1-1项目管理的形成及目标" class="headerlink" title="1.1.1项目管理的形成及目标"></a>1.1.1项目管理的形成及目标</h3><p>市场竞争的加剧、产品利润的走薄、产品迭代加快、用户要求高、企业的垂直管理很难满足，因此逐渐出现了以项目为单位的精细化管理，最终形成项目管理。</p><p>而项目的成功不是以产品的成功来衡量的，是以项目目标进行衡量，因此项目管理是扎实地实现企业的目标，将事情做好做正确。</p><p>项目管理的目标分又为两个层级： 单个项目目标及组织目标。项目经理对目标的实现承担重要的责任，其实现的核心思想为  “<u>以计划为核心，以进度为主线”</u>。</p><p>随着项目管理的发展，它已经成为解决企业经营管理和执行问题的最佳工具。</p><h3 id="1-1-2-项目管理的认证及学习的方法"><a href="#1-1-2-项目管理的认证及学习的方法" class="headerlink" title="1.1.2 项目管理的认证及学习的方法"></a>1.1.2 项目管理的认证及学习的方法</h3><p>PMP 是项美国PMI推行的项目管理专业人士的认证。IPMP是国际项目管理协会IPMA推行的认证资质，IPMP分为ABCD三个等级，分别是高级项目经理、项目经理、项目管理专家、项目管理专家。在中国也有相应的项目管理认证，如系统集成项目管理工程师、信息系统项目管理师等认证。</p><p>项目管理的学习不能仅仅停留在理论层面，首先你要对理论有深刻的认识，并将其知识方法要运用到具体的工作和生活中并总结提炼，即重视宏观思想、总结考虑问题、综合运用方法。</p><p>你可以通过PMP培训学习具体的PMP知识，你也可以通过如下我推荐的书籍拓展对项目管理的认识：</p><p>《PMPBOK》、《项目管理：计划、进度和控制的系统方法》、《成功的项目管理》、《管理突破》、《质量计划》、《转危为安》、《质量免费》</p><h2 id="1-2项目管理基本要素"><a href="#1-2项目管理基本要素" class="headerlink" title="1.2项目管理基本要素"></a>1.2项目管理基本要素</h2><p>###1.2.1项目的概念</p><h3 id="1-2-2-项目、项目集、项目组合的关系"><a href="#1-2-2-项目、项目集、项目组合的关系" class="headerlink" title="1.2.2 项目、项目集、项目组合的关系"></a>1.2.2 项目、项目集、项目组合的关系</h3><table><thead><tr><th>名称</th><th>定义</th></tr></thead><tbody><tr><td>项目</td><td>为创造独特的产品、服务、成果而进行的临时性工作</td></tr><tr><td>项目集</td><td>一组相互关联且被协调管理的项目、子项目和项目集活动，以便获得分别管理无法获得的利益</td></tr><tr><td>项目组合</td><td>以实现战略目标而组合在一起的管理项目、项目集、子项目组合和运营工作的集合</td></tr><tr><td>运营管理</td><td>企业的日常运营性、重复性工作的管理（如项目完成，以项目为资源进行运营管理，为公司创造持续性的价值）</td></tr></tbody></table><blockquote><p>tip:”临时性工作“是指具有具体的开始和结束时间的工作</p></blockquote><h3 id="1-2-3项目的生命周期及开发生命周期"><a href="#1-2-3项目的生命周期及开发生命周期" class="headerlink" title="1.2.3项目的生命周期及开发生命周期"></a>1.2.3项目的生命周期及开发生命周期</h3><p>项目的生命周期一般分为需求分析、设计规划、执行实施、项目收尾四个阶段，每个阶段都会产生一个或多个关键性的可交付成果，它代表着一个项目阶段的完成。</p><p>在IT行业中，项目生命周期又分为如下四个阶段</p><p>…mermaid<br>graph LR<br>A(需求分析)–&gt;B(方案设计)<br>B–&gt; C(代码开发)<br>C–&gt;  D(测试)<br>D–&gt; |BUG修复| C<br>D–&gt; E(运维)<br>…</p><p>项目生命周期包含一个或多个阶段、产品或成果，只要与开发相关的，这些阶段被称为开发生命周期，并有一下四种常见类型</p><table><thead><tr><th>生命周期类型</th><th>描述</th></tr></thead><tbody><tr><td>预测型</td><td>需求在开发前预先确定（需求技术明确可行）</td></tr><tr><td>迭代型</td><td>随着项目的开展，不断完善产品的功能（需求明确，技术可行性有限）</td></tr><tr><td>增量型</td><td>在项目过程中，不断的增加需求及功能，最后形成完整的 交付成果（需求不明确，技术可行）</td></tr><tr><td>敏捷型（适应）</td><td>随着需求的不断变更，快速的迭代和增量并交付成果（部分需求明确，一定的技术可行性）</td></tr></tbody></table><blockquote><p>Tip : 根据<strong>STACEY矩阵</strong>可以来判断何种项目使用何种项目开发生命周期</p></blockquote><p>###1.1.3项目管理的过程及知识领域</p><p>//TODO 49过程组图表 待默写</p><h2 id="1-3项目的运行环境"><a href="#1-3项目的运行环境" class="headerlink" title="1.3项目的运行环境"></a>1.3项目的运行环境</h2><h3 id="1-3-1-事业环境因素（EEFs）"><a href="#1-3-1-事业环境因素（EEFs）" class="headerlink" title="1.3.1 事业环境因素（EEFs）"></a>1.3.1 事业环境因素（EEFs）</h3><p>事业环境因素是指项目团队不能控制的，将对项目产生影响、限制或指令的各种条件。它主要分为组织内部及外部影响，并且是大多数规划过程的输入条件，使制定的项目计划更加的灵活可靠。</p><p>组织内部因素大致可分为：</p><ul><li>内部：愿景、使命、价值观、企业内部的软硬件条件</li><li>外部：法律、法规、标准、规范、市场、经济、自然环境</li></ul><p>组织内部因素（举例）：</p><ul><li>组织文化、结构、治理</li><li>基础设施、地理环境</li><li>员工能力</li></ul><p>组织外部因素（举例）</p><ul><li><p>市场条件</p></li><li><p>社会和文化影响</p></li><li><p>法律限制</p></li><li><p>政府</p></li><li><p>财务考虑因素（通货膨胀、利率、汇率）</p></li></ul><blockquote><p>Tip:EEFs事业环境因素对于项目计划的制定十分重要，计划开始前一定要认真识别</p></blockquote><h3 id="1-3-2-组织过程资产（OPAs）"><a href="#1-3-2-组织过程资产（OPAs）" class="headerlink" title="1.3.2 组织过程资产（OPAs）"></a>1.3.2 组织过程资产（OPAs）</h3><p>组织过程资产是指一个组织在项目执行的过程累积的知识资产，它同样是作为大多项目管理过程的输入条件。而组织过程资产的丰富程度是判断一个企业成熟度的重要标准。</p><p>组织过程资产包含：</p><ul><li>流程、政策、程序（模板、手册、指南）</li><li>知识、经验、教训（数据、信息、资料）</li></ul><h3 id="1-3-3-组织系统"><a href="#1-3-3-组织系统" class="headerlink" title="1.3.3 组织系统"></a>1.3.3 组织系统</h3><p>公司的组织系统大致分为职能型、矩阵型（弱、强、平衡）、项目型三种类型，不同的组织类型有不同的优缺点，并且项目经理的角色也会产生变化。</p><h2 id="1-4项目经理的角色"><a href="#1-4项目经理的角色" class="headerlink" title="1.4项目经理的角色"></a>1.4项目经理的角色</h2><h3 id="1-4-1-项目经理的主要工作"><a href="#1-4-1-项目经理的主要工作" class="headerlink" title="1.4.1 项目经理的主要工作"></a>1.4.1 项目经理的主要工作</h3><p>项目经理的主要工作是进行指导、沟通协调、控制、而不是做具体的技术开发工作。虽然项目经理不进行技术开发，但一定理解技术领域的知识，因为技术上的认知才更能掌控项目集项目管理的多元化</p><blockquote><p>Tip: 在领导面前当专家、在专家面前当领导 </p></blockquote><h3 id="1-4-2-项目经理的职责及需具备知识能力"><a href="#1-4-2-项目经理的职责及需具备知识能力" class="headerlink" title="1.4.2 项目经理的职责及需具备知识能力"></a>1.4.2 项目经理的职责及需具备知识能力</h3><h4 id="1-4-2-1-项目经理的基本职责"><a href="#1-4-2-1-项目经理的基本职责" class="headerlink" title="1.4.2.1 项目经理的基本职责"></a>1.4.2.1 项目经理的基本职责</h4><p>…mermaid<br>graph LR<br>A(项目经理职责) –&gt; B(确保项目目标的实现,客户满意)<br>A –&gt; C(制定项目阶段性目标和项目总控制计划)<br>A –&gt; D(组织协调团队成员)<br>A –&gt; E(履行合同义务 严格执行控制流程)<br>A –&gt; F(具备及时刻更新专业技术知识 综合知识和管理知识) </p><p>…</p><h4 id="1-4-2-2-2020项目经理能力维度"><a href="#1-4-2-2-2020项目经理能力维度" class="headerlink" title="1.4.2.2 2020项目经理能力维度"></a>1.4.2.2 2020项目经理能力维度</h4><p>…mermaid<br>pie</p><p>“项目管理”:68<br>“领导力”: 65<br>“商务能力”:58<br>“数字能力”:50</p><p>…</p><p>PMI 职业脉搏报告中，对项目经理需求技能进行调研，项目管理、领导力、商务能力、数字能力分别占比68%、65%、58%、50%，并且大多企业更倾向于对技术提升及数字化能力的投资。</p><p>科技时代已经来临，</p><h3 id="1-4-3-如何成为项目经理"><a href="#1-4-3-如何成为项目经理" class="headerlink" title="1.4.3 如何成为项目经理"></a>1.4.3 如何成为项目经理</h3><p>一般的项目经理实践者的职业生涯发展是从了解细节从底层学习，在项目组的基础岗位上全面锻炼和积累经验，3<del>5年后可能有机会成为项目经理，再过3</del>5年的具体实践才基本具备项目总监的资格。</p><p>本人通过阅读总结分析出成为项目经理的发展路径</p><ul><li><p>选择自己的行业（如IT教育，工程建筑）</p></li><li><p>根据所选行业项目经理的标准，结合自身的专业选择合适的岗位累计经验及项目管理的知识 </p></li><li><p>累计经验期间考取相关项目管理证书认证及学习项目经理其他技能，并实践运用到生活及工作中</p></li><li><p>转型实践项目管理</p></li></ul><blockquote><p>tip:项目管理专家杨述老师的学习方法</p><p>1.知识|荧光笔标记</p><p>2.结构|形成大纲目录</p><p>3.逻辑|思维导图，记忆形成及延伸新知识点</p><p>4.连接|思考、质疑、图表</p><p>5.归纳|整理、笔记、图表</p><p>6.思维模型|迭代、优化、升级</p><p>7.实践|刻意练习形成习惯</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目管理 </tag>
            
            <tag> PMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>送给懵懂的大学新生之开学礼物</title>
      <link href="/posts/38c2.html"/>
      <url>/posts/38c2.html</url>
      
        <content type="html"><![CDATA[<p>亲爱的你们，首先恭喜你们开始新的进修之路，进入新的世界。</p><a id="more"></a><p>我进入职场已有半年多的时间，已然是职场小年轻，而你们，也已是大学小鲜肉。回忆大学四年的点点滴滴，让我有一种说不出，却永远心存温暖。所以我想跟你们分享一些心得，希望你们能从中获得，去开启美好的大学生活。</p><p>初来大学，我会和你们一样，会幻想大学生活。那时，我坚信的认为大学会是我这辈子最珍贵的一个开始，所以我的幻想是无拘无束的大学生活，没有严厉的班主任，没有紧张而规矩的学习制度，一切随心所欲；我幻想着，在大学中我一定要让运动场成为大学生命中最重要的部分；我幻想着知悉大学里面神奇的一切，探索使我热血沸腾 …<br>在大学的时候，我认为是勇敢承载着我的幻想，实现了我大部分的幻想和意料之外的惊喜。如今，我认为勇敢是一颗不断探索未知事物的心，是对生活的热情，是彰显你此世不甘平凡的志向！<br>记得，因为勇敢我参与过许多活动与比赛、竞选过学生会干部、结交到好朋友和同甘共苦的队员，当然，勇敢在大学爱情中也从不缺席，两者有一必有一。它让我回首大学这四年，我不后悔，也没有太多遗憾；它让我拥有好的习惯，展望未来，是激情和恐惧！…等等，我希望你能怀揣着它，有机会去探索那个等等。</p><p>只要我们勇敢，热情，美好的的大学便真正的向你招手了！</p><p>军训过后，你一定会身处一场你听不懂的大会中，那便是新生培训。至于为什么呢？因为会有像我这样的学长学姐告诉你，大学你该怎么做等等，他们那个阶段的阅历和经验。</p><p>好了,我也该来说说了，你可以随便听听看看。但你也不要忽略一点，我能写下来，一定是想把最好的给你们，何不在未来尝试我说的的某一点去做做看呢？</p><p>大四，偶然和一位朋友交流，他告诉我他从大一就清楚四年后会去向何处。所以从一开始便规划好了自己的大学生活，四年中，也一点点的为这个目标铺路，坚持不懈最终去到了更高的学府。这个故事告诉了我们，在大学中懂得学会规划的重要性。</p><p>四年弥足漫长，我希望你能制定一两个重要且长远的目标，日积月累，在毕业之际兑现。也请你不要着急的去兑现，一个合格的四年目标注定不是短期就能实现完成的，就像精通一门外语一般。</p><p>亲爱的你们，我那时候和你们一样，没有足够的阅历和格局，我有时便会想，如果早知道能这样去做去规划，那现在该多好呀，可人生便是这般，一点点去成长，只容我们去回忆和反思。而我现在想让你们减少遗憾，不会弄丢一个美好的大学四年。</p><p>以前的我一定会告诉你们，这样做会更好。可现在发现，我指给你们的不一定是你们想要的，我们生来不同，怎能走我的所认为的路呢？我会去引导你，帮助你找到自己的目标，明白自己想要的什么。</p><p>首先，我们要先问自己，我们将来想要什么？可我思来想去，我们最后不都是想拥有一份好工作吗？无论是在世界500强的公司工作还是为自己的公司工作，都是如此。那我们要一份好的工作也不就是为了更幸福的生活和有能力去追寻梦想吗？笼统但我相信这是你们成熟后，我们大多数人的渴望。</p><p>怎么去实现？我一定会告诉你，是学习！学习是多样化的，它在我们生活的点点滴滴都存在着，但我们要明白，我们主要的学习目标是什么？</p><p>有目标的学习会带给我们动力，会明确我们的方向。所以，亲爱的你们，请你们一定要选择一个主要的学习目标，坚持的去学习。它可以是为了找到好工作所需要的知识技能，也可是未来你创办公司所需要的知识技能，也能是为了你的梦想而需要储备的知识等等…</p><p>怎么去学？每个人都会有一套自己的学习法子，可能是安静的，也可能是激烈的等等。</p><p>还记得清朝的闭关锁国吗？这个例子便是缺少交流而落后的典型例子，所以我希望你们多出没在各类活动比赛，学生部门等，去和优秀的人儿交流交流心得，同时也绽放自己的光彩。这就是是其一，增加交流的机会。</p><p>其二,学习增益，让知识更有价值。如果你是技术类专业，你可以学习更多技术相关的知识，通过任务去实践知识和获得财富。同样，如果你没有技术，何不去寻找任务，组织协助其他有人去共同完成呢？在这个过程中获得，我认为这是一种长远且通用任何场景的协作思想，让我们在不同阶段都可以财富和知识双丰收,同时理解到1+1=11，团队的重要性。</p><p>在大学生活中，兼职一定不会少，所以我希望你们通过知识技能去锻炼自己和获取财富，这样的兼职会为你有目标的学习增益，同时会更好的实践所学。也请你记住“知识等于财富”，财富+知识才是你的总收入，所以在这里，我不太提倡你们去做一些简单重复而又花费你宝贵时间的工作。此刻如此，将来也如此。</p><p>有时候，股票市场有涨又跌，我们的心情也时好时坏，有时候亏损了，浪费了也无伤大雅，何况心情也会有好的一天，所以你领悟到了什么呢？</p><p>上面我很赤裸裸的告诉你们如何通过学习获得更多，以及一种无限可能的思想。现在我想煽煽情，感觉甜甜暖暖的时候我也会开心看下去。</p><p>我发现我身边优秀的人很多，要让我说起优秀的他们，我七天七夜都不一定说完他们的好，他们的面庞和笑容烙在我心上，成为我人生最美的记忆和最亮的灯塔。亲爱的你们，我希望你们学会去欣赏他人的美好，谦虚的学习，有朝一日，框成美好的回忆挂在心中。</p><p>我有一个室友，他可能都不知道他自己有多优秀。大学四年，每天早上我都会听到他说，正东呀，起床了；小红起床了…，他坚持四年这般却在我心里的坚持了一辈子。不仅如此，学习也是这般，他几乎坚持每天学习到11点，从大一在我成绩之下最后成为了全年级成绩第一，获奖无数。他让我学到了很多优秀的品质，让我从心底的钦佩和感谢他。我身边还有很多人，比我年长还是年轻的他（她）们，一直都如他这般自律，自强，积极乐观，最终成就无悔的大学四年。</p><p>这就是我想说的第三点，学习没有捷径，坚持自律成就自我。再让我们看一则关于“复利效应”故事，这是一个能让我们受益一生的故事。</p><p>印度的舍罕王打算重赏象棋的发明人宰相西萨·班·达依尔，因为这位聪明的大臣此项发明让国王索然无味的生活充满了无限乐趣。</p><p>然而，宰相的胃口看来并不大，他跪在国王面前说：“陛下，请您在这张棋盘的第一个小格内，赏给我1粒麦子，在第二个小格内给2粒，第三格内给4粒，照这样下去，每一小格内都比前一小格加一倍。陛下，把这样摆满棋盘上所有六十四格的麦粒，都赏给您的仆人我吧！”</p><p>国王一听，区区赏金，微不足道，于是满口答应。结果怎样呢？如果要计算到第六十四格，即使拿来全印度的粮食也不足以兑现诺言。因为按照宰相的要求，需要有18，446，744，73，709，551，615 …，约合1845亿亿粒。这位宰相所要求的竟是全世界在两千年内所生产的全部小麦。</p><p>这就是复利的惊人效果，开始时微不足道，累积过后却不容小觑。它可以运用到很多场景，可我认为它用在有目标的学习上，会给我们带来不菲的收获!</p><p>前面的内容和你们的幻想，会让你们误以为大学是美好的象牙塔。其实不然，有人会为了完成学生工作时常写策划到很晚，被领导和同学批评到哭也是时有的事情；也有人为了不挂科熬夜学习后还一早去考试；为了考研朝六半晚也是真实存在的，夜晚自习室的灯也总会为某人而亮;操场的健儿们流血流汗也再正常不过，而每晚的操场也总是很拥挤等等事情，大学每天都会发生。而我也在此发誓，大学一定会存在以上的经历，而且还会是常有的事。所以，请让大学的精彩配上努力的你。</p><p>在此，我单独警醒各位，挂科的代价太昂贵，它会让你交一大笔费用，同时会花半年的时间去重修，失去许多荣誉评选的机会。你可能会认为这些荣誉无关紧要，而我认为这会是你大学努力的凭证，是获取更好工作的入场券。如果有人告诉你，挂科的大学才完整之类的话语，那么打架请带上我。</p><p>这篇文章已经很长很长了，你能读到此处我很是欣慰和感激。我还想跟你们说说我在大学中遇到过什么样的坑，让你们可以学习学习。可想想，美好的人生本就是一个个填坑的过程，可不能坏了雅兴和最美好的回忆。</p><p>假装此处有衔接——————————————＞</p><p>今天不知道是开学的第几天了，我弟弟从未如此开心的跟我分享，分享着步入的大学的喜悦，说他在军训中表演了节目，很精彩也获得了很多赞扬；说他成为了室长和班干部，说从未遇见这般精彩的生活;他就像一个才出生的孩子，对这个世界充满了好奇。</p><p>看着他，我又想起我才来的那个时候，何尝不是一个孩子呢？所以我们要倍感珍惜，珍惜以后的每一个新世界，永远充满着好奇。</p><p>最后，祝你们开学快乐，前程似锦！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大学 </tag>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
